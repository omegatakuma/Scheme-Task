#!/usr/local/bin/gosh
(use srfi-1)
(use srfi-19)
(define (main args)
  (print "YES,ToDoList!!!!!!!")
  (print "-------------------")
  (ToDo))
(define (ToDo)
  (display ">>> ")
  (flush)
  (let1 cmd (read)
		(cond ((eq? cmd ':q)(exit))
			  ((eq? cmd ':w)(w))
			  ((eq? cmd ':r)(r))
			  ((eq? cmd ':del)(del))
			  (else (begin
					  (print "***ERROR***\ncommand not found: " cmd)
					  (ToDo))))))
(define (w)
  (call-with-input-file "./.todo" 
	(lambda(p) 
	  (let1 words (read p)
			(if (eof-object? words)
			  (writ)
			  (writ words))))))
(define (writ . words)
  (call-with-output-file "./.todo"
	(lambda(out)
	  (display "ToDo> ")
	  (flush)
	  (let ((solve (read)))
		(display "Date> ")
		(flush)
		(let* ((ttime (read))
			   (result (cons solve (cons ttime '()))))
		  (if (null? words)
			(begin 
			  (format out (x->string (cons result words)))
			  (newline out)
			  (flush out)
			  (r)
			  (ToDo))
			(begin 
			  (format out (x->string (cons result (car words))))
			  (newline out)
			  (flush out)
			  (r)
			  (ToDo))))))))
(define (timer result)
  (let*	((date1 (make-date 0 0 0 0 (date-day(current-date)) (date-month(current-date))  (date-year(current-date)) (date-zone-offset (current-date))))
		 (date2 (make-date 0 0 0 0 (third result) (second result) (first result) (date-zone-offset (current-date)))))
		(cond ((> (date->modified-julian-day date1) (date->modified-julian-day date2))'期限過ぎてます。)
			  ((eqv? (date->modified-julian-day date1) (date->modified-julian-day date2))'期限日です。)
			  (else (string->symbol (string-append "残り" (x->string (- (date->modified-julian-day date2) (date->modified-julian-day date1))) "日です。" ))))))
(define (r)
  (call-with-input-file "./.todo"
	(lambda(p)
	  (let ((words (read p)))
		(if (eof-object? words)
		  (begin
			(print "Nothing!!!!!!")
			(ToDo))
		  (begin
			(for-each
			  (lambda(word n)
				(format #t "[~s]~s: ~s\n-> ~s\n" n (second word) (first word) 
						(timer (map (lambda(n)(x->number n)) (string-split (x->string (second word)) #\/)))))
			  (reverse words)(iota (length words) 1))(ToDo)))))))
(define (del)
  (display "> ")
  (flush)
  (let ((n (read)))
	(call-with-input-file "./.todo"
	  (lambda(p)
		(let* ((words (read p)))
		  (call-with-output-file "./.todo"
			(lambda(out)
			  (format out (x->string (delete (ref (reverse words) (- n 1)) (reverse words))))
			  (newline out)
			  (flush out)
			  (r)
			  (ToDo))))))))
