#!/usr/local/bin/gosh
(use srfi-1)
(use srfi-19)
(use gauche.process)
(use gauche.parseopt)
(define clear
  (let1 c (process-output->string '("clear"))
    (lambda ()
      (display c))))
(define (ToDo)
  (display "?> ")
  (flush)
  (let1 cmd (read)
		(cond ((eq? cmd ':q)(exit))
			  ((eq? cmd ':w)(w))
			  ((eq? cmd ':r)(r))
			  ((eq? cmd ':del)(del))
			  (else (begin
					  (print "***ERROR***\ncommand not found: " cmd)
					  (ToDo))))))
(define (w)
  (call-with-input-file "~/SchemeToDo/.todo" 
	(lambda(p) 
	  (let1 words (read p)
			(if (eof-object? words)
			  (create)
			  (create words))))))
(define (create . words)
  (display "NewTask> ")
  (flush)
  (let1 solve (read)
		(if (eq? solve ':q)
		  (r)
		  (begin
			(display "Date> ")
			(flush)
			(let1 ttime (read)
				  (if (eq? ttime ':q)
					(r)
					(writ solve ttime words)))))))
(define (writ solve ttime words)
  (call-with-output-file "~/SchemeToDo/.todo"
	(lambda(out)
	  (let1 result (cons solve (cons ttime '()))
			(if (null? words)
			  (begin 
				(format out (x->string (cons result words)))
				(newline out)
				(flush out)
				(w))
			  (begin 
				(format out (x->string (cons result (car words))))
				(newline out)
				(flush out)
				(w)))))))
(define (timer result)
  (let*	((date1 (make-date 0 0 0 0 (date-day(current-date)) (date-month(current-date))  (date-year(current-date)) (date-zone-offset (current-date))))
		 (date2 (make-date 0 0 0 0 (third result) (second result) (first result) (date-zone-offset (current-date)))))
		(cond ((> (date->modified-julian-day date1) (date->modified-julian-day date2))'期限過ぎてます。)
			  ((eqv? (date->modified-julian-day date1) (date->modified-julian-day date2))'期限日です。)
			  (else (string->symbol (string-append "残り" (x->string (- (date->modified-julian-day date2) (date->modified-julian-day date1))) "日です。" ))))))
(define (r)
  (call-with-input-file 
	"./.todo"
	(lambda(p)
	  (let ((words (read p)))
		(cond ((eof-object? words)
			   (begin
				 (print "Nothing!!!!!!")
				 (ToDo)))
			  ((null? words)
			   (begin 
				 (print "Nothing!!!!!!")
				 (ToDo)))
			  (else (begin
					  (for-each
						(lambda(word n)
						  (format #t "[~s]~s: ~s\n-> ~s\n" n (second word) (first word) 
								  (timer (map (lambda(n)(x->number n)) (string-split (x->string (second word)) #\/)))))
						(reverse words)(iota (length words) 1))(ToDo))))))))
(define (del)
  (let1 n (read)
  (call-with-input-file 
	"~/SchemeToDo/.todo"
	(lambda(p)
	  (let1 words (read p)
		(call-with-output-file 
		  "~/SchemeToDo/.todo"
		  (lambda(out)
			(cond
			  ((number? n)
			   (format out (x->string (delete (ref (reverse words) (- n 1)) words)))
			   (newline out)
			   (flush out)
			   (r)
			   (ToDo))
			  ((eq? n '-a)
			   (begin
				 (display "本当にいいですか？(y/n): ")
				 (flush)
				 (let1 ans (read)
					   (if (eq? ans 'y)
						 (begin
						   (format out (x->string (filter symbol? words)))
						   (newline out)
						   (flush)
						   (ToDo))
						 (ToDo)))))
			  (else (print "***ERROR command not found: " n))))))))))
(define (main args)
  (let-args (cdr args)
			((w "w|write" => w)
			 (r "r|read" => r)
			 (d "d|del" => del))
			(clear)
			(print "YES,TaskList!!!!!!!")
			(print "-------------------")
			(ToDo)))
